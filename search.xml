<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS143 Compiler</title>
    <url>/2022/11/16/CS143%20Compiler/</url>
    <content><![CDATA[<h4 id="0x00-Overview"><a href="#0x00-Overview" class="headerlink" title="0x00 Overview"></a>0x00 Overview</h4><ul>
<li><strong>lexical analyzer:</strong> also called a scanner, using a lexical analyzer generator called flex.</li>
<li> <strong>parsing</strong>: </li>
<li> <strong>semantic analysis</strong>: </li>
<li> <strong>code generation</strong>: </li>
</ul>
<h4 id="0x01-lexical-analyzer"><a href="#0x01-lexical-analyzer" class="headerlink" title="0x01 lexical analyzer"></a>0x01 lexical analyzer</h4>]]></content>
  </entry>
  <entry>
    <title>CS144 Lab 1</title>
    <url>/2022/11/02/CS144%20Lab%201/</url>
    <content><![CDATA[<p>实验指导书：<a href="https://cs144.github.io/assignments/lab1.pdf">Lab Checkpoint 1: stitching substrings into a byte stream</a></p>
<h4 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1 Overview"></a>1 Overview</h4><img src="D:\blog\coriiiander\source\_posts\pictures\CS144TCPsocket.png" alt="CS144TCPsocket" style="zoom:70%;" />

<ul>
<li>Lab 0 实现了一个ByteStram</li>
<li>Lab 1 实现StreamReassembler: a module that stitches small pieces of the byte stream (known as substrings, or segments) back into a contiguous stream of bytes in the correct sequence.</li>
<li>Lab 2 实现TCPReceiver: the part of TCP that handles the inbound byte-stream.</li>
<li>Lab 3 实现TCPSender: this part handles the outbound byte-stream.</li>
<li>Lab 4 实现TCPConnection</li>
</ul>
<h4 id="2-Getting-started"><a href="#2-Getting-started" class="headerlink" title="2 Getting started"></a>2 Getting started</h4><ul>
<li><p>Commit all solutions to Lab 0. </p>
</li>
<li><p>Run <code>git fetch</code> to retrieve the most recent version of the lab assignments.</p>
</li>
<li><p>Download the starter code for Lab 1 by running <code>git merge origin/lab1-startercode</code>.</p>
</li>
<li><p>Use <code>make</code> to compile the source code(run <code>make -j4</code> can use four processors).</p>
</li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CS144 Lab 0</title>
    <url>/2022/10/24/CS144%20Lab%200/</url>
    <content><![CDATA[<p>实验指导书：<a href="https://cs144.github.io/assignments/lab0.pdf">Lab Checkpoint 0: networking warmup</a></p>
<p>环境搭建：<a href="https://stanford.edu/class/cs144/vm_howto/vm-howto-image.html#download">Setting up your CS144 VM using VirtualBox</a></p>
<h4 id="1-Networking-by-hand"><a href="#1-Networking-by-hand" class="headerlink" title="1 Networking by hand"></a>1 Networking by hand</h4><h5 id="1-1-Fetch-a-Web-page"><a href="#1-1-Fetch-a-Web-page" class="headerlink" title="1.1 Fetch a Web page"></a>1.1 Fetch a Web page</h5><blockquote>
<p>computer’s name - IP, service’s name - TCP port number</p>
</blockquote>
<p>使用<code>telnet cs144.keithw.org http</code>连接远程网页服务器</p>
<blockquote>
<p><strong>telnet</strong> program open a reliable byte stream between your computer and another computer with a particular service running on that computer - http.</p>
</blockquote>
<p>之后再键入以下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">GET /hello HTTP/<span class="number">1.1</span><span class="symbol">&lt;enter&gt;</span></span><br><span class="line">Host: cs144.keithw.org<span class="symbol">&lt;enter&gt;</span></span><br><span class="line">Connection: <span class="keyword">close</span><span class="symbol">&lt;enter&gt;</span></span><br><span class="line"><span class="symbol">&lt;enter&gt;</span></span><br></pre></td></tr></table></figure>

<img src="D:\blog\coriiiander\source\_posts\pictures\cs144_1.png" alt="cs144_1" style="zoom:80%;" />



<h5 id="1-2-Listening-and-connecting"><a href="#1-2-Listening-and-connecting" class="headerlink" title="1.2 Listening and connecting"></a>1.2 Listening and connecting</h5><p>telnet as client, netcat as server</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\cs144_2.png" alt="cs144_2" style="zoom:67%;" />



<h4 id="2-Writing-a-network-program-using-an-OS-stream-socket"><a href="#2-Writing-a-network-program-using-an-OS-stream-socket" class="headerlink" title="2 Writing a network program using an OS stream socket"></a>2 Writing a network program using an OS stream socket</h4><h5 id="2-0-参考文档阅读"><a href="#2-0-参考文档阅读" class="headerlink" title="2.0 参考文档阅读"></a>2.0 参考文档阅读</h5><p>参考文档： <a href="https://cs144.github.io/doc/lab0/">Sponge documentation </a> FileDescriptor, Socket, TCPSocket, Address classes部分；file descriptor.hh, socket.hh, address.hh头文件。</p>
<ul>
<li><p>FileDescriptor</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\FileDescriptor.png" alt="FileDescriptor" style="zoom:85%;" /></li>
</ul>
<h5 id="2-1-building-the-starter-code"><a href="#2-1-building-the-starter-code" class="headerlink" title="2.1 building the starter code"></a>2.1 building the starter code</h5><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/cs144/sponge</span><br><span class="line">cd sponge</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. <span class="comment"># 在该目录下生成makefile文件</span></span><br><span class="line">make <span class="comment"># 编译 &quot;make -j4&quot; use four processors</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>make：任意一个 C++ 程序都可以用 g++ 来编译，但当程序规模较大时，使用 g++ 将输入大量的编译指令。可用 makefile 进行自动编译。直接用 cmake 命令生成 makefile 文件，再用 make命令根据 makefile 文件的内容，编译整个工程更加方便。</p>
</blockquote>
<ul>
<li>git clone 报错<code>gnutls_handshake() failed: Error in the pull function.</code> 解决方法：root下运行<code>apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev</code>。</li>
<li>VScode远程连接虚拟机进行开发问题<ul>
<li><a href="https://blog.csdn.net/yylxiaobai/article/details/120024829">ssh连接</a></li>
<li>permission denied: <code>sudo chmod 777 路径</code></li>
<li>找不到头文件：<code>#include &quot;socket.hh&quot;</code> 添加路径修改为 <code>#include &quot;/home/cs144/sponge/libsponge/util/socket.hh&quot;</code></li>
</ul>
</li>
</ul>
<h5 id="2-2-writing-webget"><a href="#2-2-writing-webget" class="headerlink" title="2.2 writing webget"></a>2.2 writing webget</h5><p>编码实现类似于wget命令和1.1手动实现的内容。</p>
<ol>
<li>用到HTTP请求报文、TCPSocket和Address类；</li>
<li>HTTP中每行以“\r\n”结尾而非单个”\n”；</li>
<li>client要在收到“EOF”（server回复结束）前读并打印出所有的server输出（要多次read）；</li>
</ol>
<h4 id="3-An-in-memory-reliable-byte-stream"><a href="#3-An-in-memory-reliable-byte-stream" class="headerlink" title="3 An in-memory reliable byte stream"></a>3 An in-memory reliable byte stream</h4><p>参考代码：<a href="https://www.epis2048.net/2022/cs144-lab0/">https://www.epis2048.net/2022/cs144-lab0/</a></p>
<blockquote>
<p>实验感想</p>
<ol>
<li><p>我的编程能力真的很差，写不出来，只能理解一下大佬的😵因此感觉代码非原创，博文发出来也没什么意思，指导书大家都会看。写实验报告的热情骤减。</p>
</li>
<li><p>CS144虚拟机密码设定要求一定强度，无语，每次输入都很累。</p>
</li>
</ol>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Compiler</title>
    <url>/2022/11/18/compiler/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>fuzzing 101</title>
    <url>/2022/10/30/fuzzing101/</url>
    <content><![CDATA[<h4 id="Exercise-1-Xpdf"><a href="#Exercise-1-Xpdf" class="headerlink" title="Exercise 1 Xpdf"></a>Exercise 1 Xpdf</h4><h5 id="CVE-2019-13288"><a href="#CVE-2019-13288" class="headerlink" title="CVE-2019-13288"></a>CVE-2019-13288</h5><p>每个被调用的函数在栈上被分配一个栈帧，如果一个函数被递归调用很多次，可能会导致栈内存耗尽、程序崩溃。在 Xpdf 4.01.01 中，Parser.cc 中的 Parser::getObj() 函数就可以通过精心设计的文件导致无限递归。远程攻击者可以利用它进行 DoS 攻击。</p>
<h5 id="Install-AFL"><a href="#Install-AFL" class="headerlink" title="Install AFL++"></a>Install AFL++</h5><p>Install the dependencies</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools</span><br><span class="line">sudo apt-get install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-get install -y lld llvm llvm-dev clang </span><br><span class="line">sudo apt-get install -y gcc-$(gcc --version|head -n1|sed &#x27;s/.* //&#x27;|sed &#x27;s/\..*//&#x27;)-plugin-dev libstdc++-$(gcc --version|head -n1|sed &#x27;s/.* //&#x27;|sed &#x27;s/\..*//&#x27;)-dev</span><br></pre></td></tr></table></figure>

<p>Checkout and build AFL++</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">git clone https://github.com/AFLplusplus/AFLplusplus &amp;&amp; cd AFLplusplus</span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">make distrib</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>make distrib: build binary and source distribution archives directory.</p>
</blockquote>
<p>type <code>afl-fuzz</code> then see something like this:</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\afl-fuzz.png" alt="afl-fuzz" style="zoom:67%;" />



<h5 id="Download-and-build-your-target"><a href="#Download-and-build-your-target" class="headerlink" title="Download and build your target"></a>Download and build your target</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">mkdir fuzzing_xpdf &amp;&amp; cd fuzzing_xpdf/</span><br><span class="line">sudo apt install build-essential # install some additional tools (namely make and gcc)</span><br><span class="line">wget https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz</span><br><span class="line">tar -xvzf xpdf-3.02.tar.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>wget: retrieves content from web servers. It is part of the GNU Project. Its name derives from “World Wide Web” and “get.”</p>
</blockquote>
<p>Build Xpdf:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd xpdf-3.02</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install -y build-essential gcc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从源代码获取软件的常见三步</span></span><br><span class="line">./configure --prefix=&quot;$HOME/fuzzing_xpdf/install/&quot; #配置makefile</span><br><span class="line">make # 编译代码</span><br><span class="line">make install # 将可执行文件安装到标准位置</span><br></pre></td></tr></table></figure>

<blockquote>
<p>–prefix: 安装到…/install/目录</p>
</blockquote>
<p>下载一些测试文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME/fuzzing_xpdf</span><br><span class="line">mkdir pdf_examples &amp;&amp; cd pdf_examples</span><br><span class="line">wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf</span><br><span class="line">wget http://www.africau.edu/images/default/sample.pdf</span><br><span class="line">wget https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf</span><br></pre></td></tr></table></figure>

<p>测试pdfinfo二进制文件：<code>$HOME/fuzzing_xpdf/install/bin/pdfinfo -box -meta $HOME/fuzzing_xpdf/pdf_examples/sample.pdf</code></p>
<img src="D:\blog\coriiiander\source\_posts\pictures\pdfinfo.png" alt="pdfinfo" style="zoom:67%;" />



<h5 id="Meet-AFL"><a href="#Meet-AFL" class="headerlink" title="Meet AFL++"></a>Meet AFL++</h5><p>AFL是一个<strong>覆盖导向的模糊器</strong>，它为每个变异的输入收集覆盖信息以发现新的执行路径和潜在漏洞。当源代码有效时，AFL可以使用插桩（instrumentation），在每个基本块（函数、循环等）的开头插入函数调用。</p>
<p>为了确保为我们的目标应用程序插桩，我们需要用AFL的编译器编译代码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除之前编译的目标文件和可执行文件</span></span><br><span class="line">rm -r $HOME/fuzzing_xpdf/install</span><br><span class="line">cd $HOME/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用afl-clang-fast编译器构建xpdf</span></span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">CC=$HOME/AFLplusplus/afl-clang-fast CXX=$HOME/AFLplusplus/afl-clang-fast++ ./configure --prefix=&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>运行fuzzer：<code>afl-fuzz -i $HOME/fuzzing_xpdf/pdf_examples/ -o $HOME/fuzzing_xpdf/out/ -s 123 -- $HOME/fuzzing_xpdf/install/bin/pdftotext @@ $HOME/fuzzing_xpdf/output</code></p>
<blockquote>
<p>-i：指示存放输入样例的目录；</p>
<p>-o：指示AFL++存放变异文件的目录；</p>
<p>-s：指示要使用的静态随机种子；</p>
<p>@@：占位符，AFL将用每个输入文件名替换它。</p>
</blockquote>
<ul>
<li><p><strong>运行fuzzer时遇到的问题</strong></p>
<ul>
<li><em>Hmm, your system is configured to send core dump notifications to an external utility</em></li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">echo core &gt;<span class="regexp">/proc/</span>sys<span class="regexp">/kernel/</span>core_pattern</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第一次报错：<code>/bin/pdftotext not found</code></li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\config报错.png" alt="config报错" style="zoom:80%;" />

<p>调用<code>sudo apt-get install libfreetype6-dev libmotif-dev libxt-dev</code>命令安装<code>libxt-dev</code>，<code>./configure</code>命令后增加<code>--with-freetype2-includes=/usr/include/freetype2</code>参数。</p>
<ul>
<li>第二次报错</li>
</ul>
 <img src="D:\blog\coriiiander\source\_posts\pictures\ex1报错2.png" alt="ex1报错2" style="zoom:80%;" />

<p>命令重新输一遍又好了…script boy做实验是这样的。</p>
</li>
</ul>
<p>总之，<strong>my first fuzzing</strong>！不值一提但是非常开心。</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\myFirstFuzzing.png" alt="myFirstFuzzing" style="zoom:80%;" />



<h5 id="Reproduce-amp-fix"><a href="#Reproduce-amp-fix" class="headerlink" title="Reproduce &amp; fix"></a>Reproduce &amp; fix</h5><ul>
<li><strong>Reproduce</strong></li>
</ul>
<p>在<code>$HOME/fuzzing_xpdf/out/</code>目录中定位到漏洞，将该文件作为输入传给pdftotex二进制文件：<code>$HOME/fuzzing_xpdf/install/bin/pdftotext &#39;$HOME/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt;&#39; $HOME/fuzzing_xpdf/output</code>.</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\CVE-2019-13288.png" alt="CVE-2019-13288" style="zoom: 75%;" />



<ul>
<li><strong>Triage</strong></li>
</ul>
<p>使用GDB找出此输入导致程序崩溃的原因。</p>
<p>使用调试信息重建 Xpdf 以获得符号堆栈跟踪：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -r $HOME/fuzzing_xpdf/install</span><br><span class="line">cd $HOME/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br><span class="line">CFLAGS=&quot;-g -O0&quot; CXXFLAGS=&quot;-g -O0&quot; ./configure --prefix=&quot;$HOME/fuzzing_xpdf/install/&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>运行GDB：<code>gdb --args $HOME/fuzzing_xpdf/install/bin/pdftotext $HOME/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt; $HOME/fuzzing_xpdf/output</code></p>
<p>在 GDB 中输入 <code> &gt;&gt; run</code></p>
<img src="D:\blog\coriiiander\source\_posts\pictures\fuzzing101.1.1.png" alt="fuzzing101.1.1" style="zoom:80%;" />

<p>键入<code>bt</code>获取回溯：滚动调用堆栈，看到许多<code>Parser::getObj</code>调用，这似乎表明无限递归。</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\fuzzing101.1.2.png" alt="fuzzing101.1.2" style="zoom:80%;" />



<h4 id="Exercise-2-libexif"><a href="#Exercise-2-libexif" class="headerlink" title="Exercise 2 libexif"></a>Exercise 2 libexif</h4><h5 id="CVE-2009-3895-amp-CVE-2012-2836"><a href="#CVE-2009-3895-amp-CVE-2012-2836" class="headerlink" title="CVE-2009-3895 &amp; CVE-2012-2836"></a>CVE-2009-3895 &amp; CVE-2012-2836</h5><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>命令大量参考 <a href="https://github.com/antonio-morales/Fuzzing101">https://github.com/antonio-morales/Fuzzing101</a></p>
]]></content>
  </entry>
  <entry>
    <title>resource</title>
    <url>/2022/07/05/resource/</url>
    <content><![CDATA[<p>这里记录了笔者冲浪过程中得到的一些学习灵感。</p>
<h4 id="0x00-书单"><a href="#0x00-书单" class="headerlink" title="0x00 书单"></a>0x00 书单</h4><p><a href="https://eternalsakura13.com/2018/05/31/shudan/">sakura的ctf re/pwn入门书单</a></p>
<p><a href="https://blog.csdn.net/wenrennaoda/article/details/98751217">二进制安全书籍推荐</a></p>
<p>《漏洞战争》1.5 学习资源分享</p>
]]></content>
  </entry>
  <entry>
    <title>setupBlog</title>
    <url>/2022/06/20/setupBlog/</url>
    <content><![CDATA[<h4 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h4><p>参考保姆级教学<a href="https://b23.tv/MLKFY">https://b23.tv/MLKFY</a> B站永远的神！</p>
<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br><span class="line">Usage: hexo &lt;command&gt;</span><br></pre></td></tr></table></figure>

<p>没有打开最近具体文件的文件夹。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d</span></span><br><span class="line">...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/coriiiander/coriiiander.github.io.git/&#x27;: Failed to connect to localhost port 8080 after 150217 ms: Connection refused</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\blog\coriiiander\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:390:28)</span><br><span class="line">      at ChildProcess.cp.emit (D:\blog\coriiiander\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>

<p>把_config.yml http协议改成git协议。</p>
<p>新版<code>hexo d</code> 后直接部署，无须输入<code>token</code>。</p>
<h4 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h4><p>更换主题页面报错，注意查看github主题源模板处安装依赖提示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">extends widget/base block append head link(rel=&#x27;stylesheet&#x27;, href= url_for(&quot;/style/widget-post-list.css&quot;)) block content include widget/widget-post-list block sidebar include widget/widget-search if theme.widgets.includes(&#x27;profile&#x27;) include widget/widget-profile if theme.widgets.includes(&#x27;recent_posts&#x27;) include widget/widget-recent if theme.widgets.includes(&#x27;category&#x27;) &amp;&amp; site.categories.length &gt; 0 include widget/widget-categories if theme.widgets.includes(&#x27;archive&#x27;) include widget/widget-archives if theme.widgets.includes(&#x27;tag&#x27;) &amp;&amp; site.tags.length &gt; 0 include widget/widget-tag </span><br></pre></td></tr></table></figure>

<p>本地部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>上传github</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">...</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>coriiiander&#39;s weekly</title>
    <url>/2022/06/20/weekly/</url>
    <content><![CDATA[<h4 id="0x00-2022暑假"><a href="#0x00-2022暑假" class="headerlink" title="0x00 2022暑假"></a>0x00 2022暑假</h4><ol>
<li>工训小学期</li>
<li>ROS 通信机制</li>
<li>The Economist 115-125期</li>
<li>看书<ul>
<li>《加密与解密第四版》C1</li>
<li>《0 day安全第一章》C1&amp;16-20</li>
<li>《逆向工程核心原理》C1-16</li>
<li>《程序员的自我修养》C1</li>
</ul>
</li>
</ol>
<p>5.学习了简单的pikachu</p>
<p>6.思考人生</p>
<p>7.另有一个月时间事因不便学习</p>
<h4 id="0x01-10-20-10-23"><a href="#0x01-10-20-10-23" class="headerlink" title="0x01 10/20 - 10/23"></a>0x01 10/20 - 10/23</h4><blockquote>
<p>CNATDA</p>
</blockquote>
<ul>
<li>发现了一个很不错的网站：<a href="https://csdiy.wiki/">CS自学指南</a></li>
<li>CNATDA：<a href="https://gaia.cs.umass.edu/kurose_ross/lectures.php">课程视频</a>讲的很好，最重要的是时长在可接受范围内。搭配<a href="https://kiprey.github.io/2021/05/cnatda-1/">肖神的笔记</a>学习。要做自己的笔记——无法复述出来的都是没学会的。微软输入法没有英文联想，急死了，下个讯飞输入法。…讯飞输入法也太丑了，删了…不想下搜狗。下周能不能开CS144。</li>
<li>seed Shellshock Attack，下载了n多次虚拟机，麻了。</li>
<li>要坚持每天英语阅读。</li>
</ul>
<p><font size=3 face="楷体">下学期要开始准备考研，校内课程还要兼顾，我只有半年时间，完全不够用。</font></p>
<h4 id="0x02-10-24-10-30"><a href="#0x02-10-24-10-30" class="headerlink" title="0x02 10/24 - 10/30"></a>0x02 10/24 - 10/30</h4><blockquote>
<p>CNATDA &amp; CS144</p>
</blockquote>
<ul>
<li>CS144：同步开始吧，毕竟我容易犯重理论轻实践的毛病。完成了Lab 0。</li>
<li>CNATDA：Chapter 3结束。后几节图表有点多，有点难。</li>
<li>fuzzing: <a href="https://github.com/antonio-morales/Fuzzing101">fuzzing101</a>. 我找到了很好的fuzzing学习资源 - <a href="https://aflplus.plus/docs/tutorials/">afl++tutorials</a>. 重启是解决一切问题的根本方法，昨天的bug今天再运行一遍突然就好了。</li>
<li>软测课设 wifiDOS(ESP8266)，怎么才能用30分钟展示这个小实验。</li>
</ul>
<p><font size=3 face="楷体">现在重拾fuzzing的话完全学不深入，最多成为一个脚本小子，杀了我吧，fuzzing门槛好高。</font></p>
<h4 id="0x03-10-31-11-6"><a href="#0x03-10-31-11-6" class="headerlink" title="0x03 10/31 - 11/6"></a>0x03 10/31 - 11/6</h4><blockquote>
<p>CNATDA &amp; CS144 &amp; AFL源码</p>
</blockquote>
<ul>
<li>CNATDA：PPT看到Chapter 5。</li>
<li>CS144：Lab 1。代码自己写还是写不出来。</li>
<li>fuzzing：源码，看不懂。</li>
<li>英语：选修课阅读。</li>
<li>软测&amp;算法期中复习。信安数学基础读了一篇论文《Jaqen A High-Performance Switch-Native Approach for Detecting and Mitigating Volumetric DDoS Attacks with Programmable Switches》花了挺多工夫但是没读懂没收获，无话可说。</li>
</ul>
<p><font size=3 face="楷体">收拾了一下情绪，果然脑细胞在体外能导向学习，在体内只能长出恋爱脑。</font></p>
<h4 id="0x04-11-7-11-13"><a href="#0x04-11-7-11-13" class="headerlink" title="0x04 11/7 - 11/13"></a>0x04 11/7 - 11/13</h4><blockquote>
<p>期中考试周 &amp; fuzzing101 &amp; CNATDA</p>
</blockquote>
<ul>
<li>fuzzing：发现一个有关内核漏洞挖掘的网站<a href="https://fuzzysecurity.com/tutorials.html%E3%80%82%E5%90%AC%E5%AD%99%E8%80%81%E5%B8%88%E7%9A%84%E5%BB%BA%E8%AE%AE%E4%B8%8D%E7%9C%8BAFL%E6%BA%90%E7%A0%81%E4%BA%86%EF%BC%8C%E5%81%9Afuzzing101">https://fuzzysecurity.com/tutorials.html。听孙老师的建议不看AFL源码了，做fuzzing101</a>. exercise1 &amp; 2.</li>
<li>CNATDA：网课看不下去了，改看英文原版书。笔记才做到第四章。三天内一定要结束它！</li>
<li>seed Buffer Overflow Attack Lab.</li>
</ul>
<p><font size=3 face="楷体">关于我醉心网课被群友说“不适合看书”以及sakura师傅说“一般一本几百页的书，最多看一个周就看完了”的事情。sakura师傅还让我“先打好开发的基础吧”。哭，补天路漫漫。还想做编译原理，还想看《漏洞战争》。</font></p>
<h4 id="0x05-0x06-11-14-11-27"><a href="#0x05-0x06-11-14-11-27" class="headerlink" title="0x05 - 0x06 11/14 - 11/27"></a>0x05 - 0x06 11/14 - 11/27</h4><blockquote>
<p>编译原理 &amp; CS144 &amp; seed系统安全实验</p>
</blockquote>
<ul>
<li>CNATDA：11月16日结束了计网书的阅读。</li>
<li>编译原理：stanford 网课前两章，lab 1 &amp; 2 .</li>
<li>CS144：lab 2 &amp; 3 &amp; 4 .</li>
<li>seed实验（BufferOve rflow &amp; FormatString &amp; RaceCondition &amp; DirtyCOW &amp; Meltdown &amp; Spectre），wifiDOS</li>
</ul>
<p><font size=3 face="楷体">江姝潼学姐是我的榜样❗ 编译原理第二章难起来了。无语死了，一直在截屏，我怎么能忘了这个世界上有个东西叫PPT啊！</font></p>
<h4 id="0x07-11-28-12-4"><a href="#0x07-11-28-12-4" class="headerlink" title="0x07 11/28 - 12/4"></a>0x07 11/28 - 12/4</h4><blockquote>
<p>编译原理 &amp; 软测报告</p>
</blockquote>
<ul>
<li>编译原理：网课听不懂了，编程能力差实验也卡在那里…看看文字资料</li>
<li>最近大部分时间花在准备软测两个报告上（wifiDOS &amp; fuzzing）<ul>
<li>fuzzing：crashes分析与源码阅读</li>
</ul>
</li>
</ul>
<p><font size=3 face="楷体">fuzzing资料想找还是能找到很多的，我原先会觉得门槛高是因为没确定下来学习方向也没认真找。</font></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/11/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="0x00-传文件到虚拟机"><a href="#0x00-传文件到虚拟机" class="headerlink" title="0x00 传文件到虚拟机"></a>0x00 传文件到虚拟机</h4><h5 id="传文件到ubuntu"><a href="#传文件到ubuntu" class="headerlink" title="传文件到ubuntu"></a>传文件到ubuntu</h5><p><a href="https://blog.csdn.net/jackghq/article/details/54974141">https://blog.csdn.net/jackghq/article/details/54974141</a></p>
<h5 id="传文件到kali"><a href="#传文件到kali" class="headerlink" title="传文件到kali"></a>传文件到kali</h5><ul>
<li>重启之后，再次连接失败。</li>
</ul>
<p>root权限下分配ip：<code>ifconfig eth0 up</code>    <code>dhclient eth0</code>    </p>
<p><code>/etc/init.d/ssh start</code>启动SSH后，可以使用。</p>
<p>最初一直想下载VMTools直接拖文件进虚拟机，并且还能复制粘贴和调整屏幕大小。可是按照官方教程试了很多很多次都在最后一步有<code>eject:cannot open /dev/sr0:设备或资源忙；Eject Failed:If possible manually eject the Tools installer from cdrom mounted at...       </code>的报错。于是我转而用SSH传文件。</p>
<p>运行<code>ps -e|grep ssh</code>发现kali自带的ssh，用<code>/etc/init.d/ssh start</code>启动它，运行<code>update-rc.d ssh enable</code>设置开机自启SSH。</p>
<img src="D:\CTF\notes' pictures\SSH传文件到kali_1.png" alt="SSH传文件到kali_1" style="zoom: 67%;" />

<p>下载xshell并配置，注意不修改端口，主机IP不是自己当前所在地的IP（搜“IP”所得），而是虚拟机的ip地址。</p>
<img src="D:\CTF\notes' pictures\SSH配置1.png" alt="SSH配置1" style="zoom:50%;" />

<p>kali输入<code>ifconfig -a</code>得到如下反馈，误以为127.0.0.1是虚拟机ip，又搞了好长时间。</p>
<img src="D:\CTF\notes' pictures\虚拟机ip查询1.png" alt="虚拟机ip查询1" style="zoom:50%;" />

<p>因为看到一个方法说kali右上角网络设置中可以直接看到ip，突然发现自己的虚拟机没有网络连接（尽管现在仍然没有，这个好像不影响）。于是又在网上搜这个问题，得到了分配ip的方法：<a href="https://blog.csdn.net/weixin_42367179/article/details/112802407%E3%80%82%E7%BB%88%E4%BA%8E%E5%BE%97%E5%88%B0%E4%BA%86SSH%E8%AE%BE%E7%BD%AE%E4%B8%AD%E5%BA%94%E8%AF%A5%E5%A1%AB%E5%86%99%E7%9A%84%E6%AD%A3%E7%A1%AEIP%E5%80%BC%E3%80%82">https://blog.csdn.net/weixin_42367179/article/details/112802407。终于得到了SSH设置中应该填写的正确IP值。</a></p>
<p>加上之前稀里糊涂地进行过了对属性文件的修改：</p>
<ul>
<li>1.将 permitrootlogin 前面的注释去掉,并且后面改为yes，如果没有则添加permitrootlogin  yes</li>
<li>2.将#PasswordAuthentication no的注释去掉，并且将NO修改为YES //kali中默认是yes</li>
<li>3.按Esc , 同时按shift和冒号键 ,输入wq ，回车保存</li>
</ul>
<p>再次连接时，SSH显示成功连接！最后，修改远程文件夹地址，即可在kali中看到传过来的文件啦！</p>
<img src="D:\CTF\notes' pictures\SSH配置2.png" alt="SSH配置2" style="zoom:50%;" />

<p><code>rz</code>传送文件。压缩一下就可以传文件夹了。</p>
<p><code>rm -rf +文件名</code>删除文件</p>
<p><code>sz</code>将kali文件传到windows中，其后需要跟上文件名</p>
<p>点击该处下载xftp后，就会出现类似ftp传输界面了。</p>
<img src="D:\CTF\notes' pictures\xshell中xftp传文件.png" alt="xshell中xftp传文件" style="zoom:50%;" />



<h4 id="0x01-kali连不上网"><a href="#0x01-kali连不上网" class="headerlink" title="0x01 kali连不上网"></a>0x01 kali连不上网</h4><p><a href="https://blog.csdn.net/xujing19920814/article/details/73469175#:~:text=%23%E9%9C%80%E8%A6%81%E5%9C%A8root%E6%9D%83%E9%99%90%E4%B8%8B,%E9%80%80%E5%87%BA%E6%9C%80%E5%90%8Ereboot%E9%87%8D%E5%90%AF%EF%BC%8C%E5%86%8D%E6%AC%A1">https://blog.csdn.net/xujing19920814/article/details/73469175#:~:text=%23%E9%9C%80%E8%A6%81%E5%9C%A8root%E6%9D%83%E9%99%90%E4%B8%8B,%E9%80%80%E5%87%BA%E6%9C%80%E5%90%8Ereboot%E9%87%8D%E5%90%AF%EF%BC%8C%E5%86%8D%E6%AC%A1</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>title: 计算机网络笔记</p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>这里记录了笔者学习《计算机网络：自顶向下方法》和编者的<a href="https://gaia.cs.umass.edu/kurose_ross/lectures.php">教学资料</a>的一些笔记。由于英文授课及部分翻译较拗口的原因，大部分内容将用英文书写。</p>
<h4 id="Chapter-2-Appication-layer"><a href="#Chapter-2-Appication-layer" class="headerlink" title="Chapter 2  Appication layer"></a>Chapter 2  Appication layer</h4><ul>
<li><p>application architecture</p>
<ul>
<li>client-server<ul>
<li>server: always-on host, permanent IP address, often in data centers for scaling.</li>
<li>clients: communicate with server, intermittently connected, may have dynamic IP addresses, not communicate directly with each other.</li>
</ul>
</li>
<li>peer-to-peer <ul>
<li>arbitrary end systems directly communicate, intermittently connected and dynamic IP addresses. each other’s server and clients.</li>
<li>complex management</li>
</ul>
</li>
</ul>
</li>
<li><p>addressing processes（进程寻址）</p>
<ul>
<li>IP address &amp; port numbers</li>
<li>port numbers: 80 - HTTP, 25 - mail, 53 - DNS.</li>
</ul>
</li>
<li><p>transport protocols services</p>
<ul>
<li><p>TCP service</p>
<ul>
<li>reliable transport</li>
<li>flow control: sender won’t overwhelm rcver</li>
<li>congestion control: throttle sender when overloaded</li>
<li>connection-oriented: setup required </li>
<li>does not provide: timing（定时）, minthroughtput guarantee, security</li>
</ul>
</li>
<li><p>UDP service</p>
<ul>
<li>unreliable data transfer and does not provide all things mentioned above</li>
</ul>
<blockquote>
<p>existence significance: we can build additional services in the app layer.</p>
</blockquote>
</li>
<li><p>TLS - Transport Layer Security</p>
<ul>
<li>vanilla TCP &amp; UDP sockets: no encryption &amp; cleartext</li>
<li>encrypted TCP connections &amp; end-point authentication</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>socket</strong></p>
<ul>
<li>(only)application progamming interface down to the transport layer, process sends/recv msg to/from its socket.</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\socket.jpg" alt="socket" style="zoom:70%;" />

<ul>
<li>UDP</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\UDPsocket3.png" alt="UDPsocket3" style="zoom:60%;" />

<img src="D:\blog\coriiiander\source\_posts\pictures\UDPsocket.png" alt="UDPsocket" style="zoom:60%;" />

<img src="D:\blog\coriiiander\source\_posts\pictures\UDPsocket2.png" alt="UDPsocket2" style="zoom:60%;" />

<ul>
<li><p>TCP</p>
<ul>
<li>server process must first be running</li>
<li>server: 1th.welcoming(listening) socket → 2nd.connection socket</li>
<li>server is allowed to talk with multiple clients</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\TCPsocket.jpg" alt="TCPsocket" style="zoom:60%;" /></li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\TCPsocket1.png" alt="TCPsocket1" style="zoom:60%;" />

<img src="D:\blog\coriiiander\source\_posts\pictures\TCPsocket2.png" alt="TCPsocket2" style="zoom:60%;" /></li>
<li><p>HTTP - hypertext transfer protocol</p>
<ul>
<li><p>stateless protocol: server maintains no info about past client requests. </p>
<blockquote>
<p>stateful: if crashes happened, states would be inconsistent and need reconciling. complex.</p>
<p>how: at endpoints/in msg.</p>
</blockquote>
</li>
<li><p>non-persistent HTTP（非持续连接）</p>
<ul>
<li><p>at most one object sent over TCP connection</p>
</li>
<li><p>response time = 2*RTT + file transmission time</p>
</li>
<li><p>issues</p>
<ol>
<li><p>2 RTTs per object</p>
</li>
<li><p>OS overhead for each TCP connection</p>
</li>
<li><p>open multiple parallel TCP connections(downloading multiple objects requires multiple connections)</p>
</li>
</ol>
</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\non-persistentHTTP.jpg" alt="non-persistentHTTP" style="zoom:70%;" /></li>
<li><p>persistent HTTP(more used, HTTP 1.1)</p>
<ul>
<li>server leaves connection open after sending response</li>
<li>multiple objects can be sent over single TCP connection</li>
<li>one RTT reduced</li>
</ul>
</li>
<li><p>HTTP msg</p>
<ul>
<li><p>request msg</p>
<blockquote>
<p>methods: POST GET HEAD PUT</p>
</blockquote>
<img src="D:\blog\coriiiander\source\_posts\pictures\HTTPrqmsg1.jpg" alt="HTTPrqmsg1" style="zoom:67%;" />

<img src="D:\blog\coriiiander\source\_posts\pictures\HTTPrqmsg2.jpg" alt="HTTPrqmsg2" style="zoom:67%;" /></li>
<li><p>response msg</p>
<p>◽ response status codes</p>
<ol>
<li>200 OK: succeeded</li>
<li>301 moved permanently: moved and new location specified in this msg</li>
<li>400 bad request: request msg not understood by server</li>
<li>505 HTTP version not supported<img src="D:\blog\coriiiander\source\_posts\pictures\HTTPrpmsg1.jpg" alt="HTTPrpmsg1" style="zoom:67%;" /></li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>cookies</p>
<ul>
<li><p>maintain some states between transactions</p>
</li>
<li><p>4 components: ①cookie header line of HTTP response message ②cookie header line in next HTTP request message ③cookie file kept on user’s host, managed by user’s browser ④back-end database at Web site</p>
</li>
</ul>
<blockquote>
<p>example: vivi visits a e-commerce site for first time.When initial HTTP requests arrives at site, site creates: unique ID (aka “cookie”) &amp; entry in backend database for ID.Subsequent HTTP requests will contain cookie ID value to identify vivi. </p>
<p>privacy: after explicit consent.</p>
</blockquote>
</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\cookie.png" alt="cookie" style="zoom:67%;" />

<ul>
<li>web caches(aka proxy servers)<ul>
<li>satisfy requests without involving origin server</li>
<li>conditional GET: don’t send object if cache has up-to-date cached version</li>
</ul>
</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\conditionalGET.png" alt="conditionalGET" style="zoom:67%;" />

<ul>
<li><p>HTTP 2 &amp; 3</p>
<blockquote>
<p>HTTP 1.1: With FCFS, small object may wait for head-of-line (HOL) blocking. Loss recovery stalls.</p>
</blockquote>
<ul>
<li>HTTP 2: Client-specified transmission order(not FCFS). Push unrequested objects beforehand. Divide objects into frames to mitig ate HOL blocking.</li>
<li>HTTP 3: add security and congestion control (more pipelining) over UDP.</li>
</ul>
</li>
<li><p>SMTP(Simple Mail Transfer Protocol)</p>
<ul>
<li>user agent —-SMTP—→ A‘s mail server —-TCP—→ B’s mail server —-SMTP—→ user agent</li>
<li>persistent connections, multiple msg can be sent over a single smtp connection.</li>
</ul>
<blockquote>
<p>IMAP：the same server.</p>
</blockquote>
<img src="D:\blog\coriiiander\source\_posts\pictures\SMTP.png" alt="SMTP" style="zoom:60%;" /></li>
<li><p>DNS(Domain Name System)</p>
<ul>
<li>hierarchy</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\DNS1.png" alt="DNS1" style="zoom:67%;" />

<ul>
<li><p>name resolution</p>
<ul>
<li>iterated query</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\DNS2.jpg" alt="DNS2" style="zoom:55%;" />

<ul>
<li>recursive query</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\DNS3.png" alt="DNS3" style="zoom:65%;" /></li>
<li><p>msg format</p>
<ul>
<li>DNS records: (name, value, type, ttl) type=A, NS, CNAME, MX.</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\DNS4.png" alt="DNS4" style="zoom:67%;" /></li>
</ul>
</li>
<li><p>video streaming</p>
<ul>
<li>image coding redundancy: spatial - send only color value &amp; num of repeated values instead of sending N values of same color. temporal - send only diffs instead of complete one. </li>
<li>playout buffering: jitter; DASH(Dynamic, Adaptive Streaming over HTTP): clients can choose different coding rates.</li>
</ul>
</li>
<li><p>CDN(Content distribution networks)</p>
<blockquote>
<p>OTT: internet host-host communication as a service(netflix).</p>
</blockquote>
</li>
</ul>
<h4 id="Chapter-3-Transport-layer"><a href="#Chapter-3-Transport-layer" class="headerlink" title="Chapter 3 Transport layer"></a>Chapter 3 Transport layer</h4><blockquote>
<p>network layer: logical communication between hosts; </p>
<p>transport layer: logical communication between processes. Actions: change app layer msg into segment which will be passed to IP and segment header fields matters. Inverse process reverses.</p>
</blockquote>
<ul>
<li>Multiplexing and demultiplexing<ul>
<li>UDP: use IP address &amp; destination port number</li>
<li>TCP: use 4-tuple - source and destination IP addresses, and port numbers</li>
</ul>
</li>
</ul>
<ul>
<li>UDP(User Datagram Protocol)<ul>
<li>checksum: </li>
</ul>
</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\UDPformat.png" alt="UDPformat" style="zoom:60%;" />

<ul>
<li><p>TCP(Transmission Control Protocol)</p>
<ul>
<li><p>Reliable data transfer protocol (rdt)</p>
<ul>
<li>interfaces</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\rdtinterface.png" alt="rdtinterface" style="zoom:80%;" />

<ul>
<li>rdt1.0: reliable transfer over a reliable channel</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\rdt1.0.png" alt="rdt1.0" style="zoom:80%;" />

<ul>
<li><p>rdt2.0: channel with bit errors</p>
<p>◽ use acknowledgements (ACKs) &amp; negative acknowledgements (NAKs) ,  retransmission to recover from errors.</p>
<blockquote>
<p>stop and wait: sender sends one packet,  then waits for receiver  response.</p>
</blockquote>
<p><img src="D:\blog\coriiiander\source\_posts\pictures\rdt2.0sender.png" alt="rdt2.0sender" style="zoom:70%;" />                  <img src="D:\blog\coriiiander\source\_posts\pictures\rdt2.0receiver.png" alt="rdt2.0receiver" style="zoom:75%;" /></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Chapter-4-Network-Layer-Data-Plane"><a href="#Chapter-4-Network-Layer-Data-Plane" class="headerlink" title="Chapter 4 Network Layer: Data Plane"></a>Chapter 4 Network Layer: Data Plane</h4><blockquote>
<p>Internet edge ends, Internet Edge begins.</p>
<p><strong>Data plane:</strong> local router actions moving a datagram from an input link to an output link at a router. <strong>Control plane:</strong> the network wide view of getting packets from one edge of network to another edge of network.The coordination and the management of all devices in the Internet.</p>
</blockquote>
<ul>
<li><p>network-layer functions</p>
<ul>
<li>forwarding: local, move packets from a router’s input link to appropriate router output link.Nanosecond time scale and implemented in hardware.</li>
<li>routing: network-wide, determine route taken by packets from source to destination.Second time scale and implemented in software.</li>
</ul>
</li>
<li><p>router</p>
<ul>
<li><p>architecture</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\routerArchi.png" alt="routerArchi" style="zoom: 80%;" />

<ol>
<li>Input Port</li>
</ol>
<img src="D:\blog\coriiiander\source\_posts\pictures\inputPort.png" alt="inputPort" style="zoom:80%;" />

<ul>
<li><p>line termination: physical layer, bit-level reception.</p>
</li>
<li><p>link layer protocol: bits are assembled into link layer frames, like the Ethernet frames.</p>
</li>
<li><p>decentralized switching: network layer functions, match plus action.</p>
<ul>
<li><p>forwarding</p>
<p>① destination-based forwarding: forward based only on destination IP address (traditional).</p>
<p>② generalized forwarding: forward based on any set of header field values.</p>
<blockquote>
<p>Longest prefix match: using ternary content addressable memories (TCAMs). Present address to TCAM, retrieve address in one clock cycle, regardless of table size.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>Switching Fabrics</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\swichingFabrics.png" alt="swichingFabrics" style="zoom: 80%;" /></li>
</ol>
<blockquote>
<p>NR &gt; R: non-blocking machine.</p>
</blockquote>
<ul>
<li><p>three major types of switching fabrics:</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\3types.png" alt="3types" style="zoom:80%;" />

<p>① Switching via memory: pkt signal the CPU via an interrupt, pkt copied to system’s memory.</p>
<p>② Bus: switching speed limited by bus bandwidth.</p>
<p>③ interconnection network.</p>
</li>
</ul>
</li>
<li><p>queuing</p>
<ul>
<li><p>Input port queuing</p>
<ul>
<li>Head-of-the-Line (HOL) blocking: green pkt will experiences HOL blocking one packet time later.</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\HOL.png" alt="HOL" style="zoom:80%;" /></li>
<li><p>Output port queuing</p>
<ul>
<li><p>How much buffering?</p>
<p>① RFC 3439: RTT times(*) link capacity C.</p>
<p>② recent: with N flows, RTT*C/√N</p>
</li>
<li><p>Buffer Management</p>
<ul>
<li><p>drop: tail drop/priority.</p>
</li>
<li><p>marking: (ECN, RED)</p>
<blockquote>
<p>ECN: Explicit Congestion Notification</p>
</blockquote>
</li>
<li><p>Packet Scheduling: FCFS, priority, round robin, weighted fair queueing(gets weighted amount of service in each cycle)</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Network Neutrality</p>
</li>
<li><p>IP</p>
<ul>
<li><p>IPv4</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\ipv4.png" alt="ipv4" style="zoom:67%;" />

<ul>
<li>dotted-decimal IP address notation: 223.1.1.1 = 11011111 00000001 00000001 00000001</li>
<li>subnet mask: 223.1.1.0/24 中 /24 指示32比特中最左侧24比特定义了子网地址。</li>
</ul>
</li>
<li><p>IP addressing(allocation strategy): CIDR(Classless InterDomain Routing)</p>
</li>
<li><p>DHCP: Dynamic Host Configuration Protocol</p>
<blockquote>
<p>How does <strong>host</strong> get IP address? hard-coded by sysadmin in config file or DHCP(plug-and-play)</p>
<p>Network get subnet part of IP address from its ISP’s address space.</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\ispip.png" alt="ispip" style="zoom:80%;" />
</blockquote>
<ul>
<li>DHCP server will be co-located in router, serving all subnets to which router is attached.</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\DHCP.png" alt="DHCP" style="zoom:80%;" />

<ul>
<li> <strong>src</strong>: 0.0.0.0 no IP yet; <strong>dest</strong>: 255.255.255.255 broadcast to all interfaces on the subnet; <strong>transaction ID</strong>: reply num.</li>
</ul>
<blockquote>
<p>DHCP can return more than just allocated IP address on subnet.</p>
</blockquote>
</li>
<li><p>address aggregation (route aggregation/route summarization):  使用单个网络前缀通告多个网络。</p>
</li>
<li><p>NAT(network address translation)</p>
<blockquote>
<p>Since hundreds of thousands of networks are using same block of addresses which only have meaning within the given network, we can’t use them as source or a destination addresses.</p>
</blockquote>
<img src="D:\blog\coriiiander\source\_posts\pictures\NAT.png" alt="NAT" style="zoom:67%;" />

<ul>
<li>use a NAT translation table at NAT router(include port numbers &amp; IP addresses) to know which internal host it is.</li>
</ul>
<blockquote>
<p>controversy: port nums should be used for addressing processes, not for addressing hosts. </p>
</blockquote>
</li>
<li><p>IPv6</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\IPv6.png" alt="IPv6" style="zoom: 67%;" />

<ul>
<li>tunneling: IPv6 datagram carried as payload in IPv4 datagram among IPv4 routers.</li>
</ul>
</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\ipv46.png" alt="ipv46" style="zoom:67%;" /></li>
<li><p>Generalized Forwarding and SDN</p>
<ul>
<li><p>OpenFlow: a standard that pioneered the notion of the match-plus-action, as well as the SDN revolution more generally.</p>
</li>
<li><p>match: OpenFlow flow table</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\openflow.png" alt="openflow" style="zoom:67%;" /></li>
<li><p>action: forwarding, dropping, modify-field.</p>
</li>
</ul>
</li>
</ul>
<h4 id="Chapter-5-Network-Layer-Control-Plane"><a href="#Chapter-5-Network-Layer-Control-Plane" class="headerlink" title="Chapter 5 Network Layer: Control Plane"></a>Chapter 5 Network Layer: Control Plane</h4><ul>
<li><p>two control-plane approaches: </p>
<ul>
<li><p>traditional per-router control: implemented in routers; forwarding table ↓</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\traditional.png" alt="traditional" style="zoom:67%;" />

<blockquote>
<p>a routing algorithm runs in each and every router and the routing component in the router communicates with the routing components in other routers.</p>
</blockquote>
</li>
<li><p>software-defined networking (SDN): implemented in (remote) servers. flow table ↓</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\sdn.png" alt="sdn" style="zoom:67%;" />

<ul>
<li>control agent (CA) has minimum functionality.It’s job is to communicate with the controller, and to do as the controller commands.(key distinction between two approaches)</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Routing Algorithms</p>
<blockquote>
<p>traditional routing algorithms is the basis for OSPF  &amp; BGP.</p>
</blockquote>
<ul>
<li>The Link-State (LS) Routing Algorithm</li>
<li>The Distance-Vector (DV) Routing Algorithm</li>
</ul>
<p>【算法的坑以后再来补】</p>
</li>
<li><p>Intra-AS Routing in the Internet: OSPF - Open Shortest Path First</p>
<ul>
<li>autonomous systems (ASs): consisting of a group of routers that are under the same administrative control. Identified by autonomous system number (ASN).</li>
</ul>
<blockquote>
<p>The routing algorithm running within an AS is called an intra-autonomous system routing protocol.</p>
<p>OSPF: a publicly available(open) link-state protocol.</p>
</blockquote>
<ul>
<li>router broadcasts routing information to all other routers in the AS.</li>
</ul>
</li>
<li><p>Routing Among the ISPs: BGP - Border Gateway Protocol</p>
<blockquote>
<p>BGP let each subnet know each other’s existence and determine the best routes to the prefixes.</p>
</blockquote>
<ul>
<li><p>gateway router &amp; internal router, external BGP (eBGP) &amp; internal BGP (iBGP)</p>
</li>
<li><p>BGP attributes: AS-PATH &amp; NEXT-HOP</p>
<blockquote>
<p>a prefix along with its attributes is called a route.</p>
</blockquote>
<ul>
<li>AS-PATH contains the list of ASs through which the advertisement has passed. (AS2 AS3, AS3)</li>
<li>NEXT-HOP is the IP address of the router interface that begins the AS-PATH. (2a, 3d)</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\distribute.png" alt="distribute" style="zoom:50%;" /></li>
<li><p>Hot Potato Routing</p>
<ul>
<li>a router (eg. 1b) choose route with the least cost to the NEXT-HOP router.It tries to reduce the cost in its own AS while ignoring the outside. </li>
</ul>
</li>
<li><p>Route-Selection Algorithm</p>
<blockquote>
<p>If there are two or more routes to the same prefix…</p>
</blockquote>
<ul>
<li>local preference value attributes</li>
<li>the shortest AS-PATH(same above goes below…)</li>
<li>closest NEXT-HOP router(hot potato routing)</li>
<li>BGP identifiers</li>
</ul>
</li>
</ul>
</li>
<li><p>The SDN Control Plane</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\componentsOfSDN.png" alt="componentsOfSDN" style="zoom:67%;" />

<ul>
<li><p>SDN controller </p>
<img src="D:\blog\coriiiander\source\_posts\pictures\componentOfcontroller.png" alt="componentOfcontroller" style="zoom: 80%;" />

<ul>
<li>a communication layer: communicating between the SDN controller and controlled network devices.</li>
<li>a network-wide state-management layer. </li>
<li>the interface to the network-control application layer: the northbound API allows network-control applications to read/write network state and flow tables within the state management layer. </li>
</ul>
<blockquote>
<p>controller: logically centralized but physically distributed.</p>
</blockquote>
</li>
<li><p>OpenFlow Protocol</p>
<ul>
<li>The OpenFlow protocol operates over TCP, with a default port number of 6653.</li>
<li>messages flowing from the controller to the controlled switch: <ol>
<li>configuration: set a switch’s configuration parameters.</li>
<li>modify-State: modify entries in the switch’s flow table and ports.</li>
<li>read-State: collect statistics and counter values from the switch’s flow table and ports.</li>
<li>send-Packet: send msg contains the packet to be sent in its payload.</li>
</ol>
</li>
<li>messages flowing from the SDN-controlled switch to the controller:<ol>
<li>flow-removed: informs that a flow table entry has been removed.</li>
<li>port-status: inform changes in port status.</li>
<li>packet-in.</li>
</ol>
</li>
<li></li>
</ul>
</li>
</ul>
</li>
<li><p>ICMP - The Internet Control Message Protocol</p>
</li>
</ul>
<ul>
<li><p>Network Management and SNMP</p>
<ul>
<li><p>network management framework </p>
<img src="D:\blog\coriiiander\source\_posts\pictures\componentOfnetwork.png" alt="componentOfnetwork" style="zoom:60%;" /></li>
<li><p>SNMP - Simple Network Management Protocol </p>
<ul>
<li>an application-layer protocol used to convey network-management control and information messages between a managing server and an agent executing on behalf of that managing server.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Chapter-6-The-Link-Layer-and-LANs"><a href="#Chapter-6-The-Link-Layer-and-LANs" class="headerlink" title="Chapter 6 The Link Layer and LANs"></a>Chapter 6 The Link Layer and LANs</h4><blockquote>
<p>Refer to any device that runs a link-layer protocol as a <strong>node</strong>, communication channels that connect adjacent nodes along the communication path as <strong>links</strong>.</p>
</blockquote>
<ul>
<li><p>Where the link layer is implemented ?</p>
<ul>
<li>Link layer is implemented in a <strong>network adapter</strong> (aka a <strong>network interface card (NIC)</strong>).</li>
</ul>
<img src="D:\blog\coriiiander\source\_posts\pictures\networkAdapter.png" alt="networkAdapter" style="zoom:50%;" /></li>
<li><p>Error-Detection and -Correction</p>
</li>
</ul>
<p>【待补】</p>
<ul>
<li><p>Multiple Access Links and Protocols</p>
<ul>
<li><p>two types of network links:</p>
<ul>
<li><p>point-to-point links</p>
<ul>
<li>single sender and receiver at end of the link.</li>
<li>protocols: point-to-point protocol (PPP) and high-level data link control (HDLC).</li>
</ul>
</li>
<li><p> broadcast links</p>
</li>
<li><p>multiple sending and receiving nodes connected to the same, single, shared broadcast channel. </p>
</li>
<li><p>example technologies: Ethernet and wireless LANs.</p>
</li>
<li><p>protocol: multiple access protocols.</p>
<ol>
<li><p>channel partitioning protocols</p>
</li>
<li><p>random access protocols</p>
</li>
<li><p>taking-turns protocols</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Channel Partitioning Protocols</p>
<ul>
<li>TDM/FDM: each node gets a dedicated transmission rate of <em>R</em>/<em>N</em> bps during each frame time. </li>
<li>CDMA (code division multiple access): assigns a different <em>code</em> to each node so that different nodes can transmit simultaneously and received correctly(anti-jamming).</li>
</ul>
</li>
<li><p>Random Access Protocols</p>
<blockquote>
<p>nodes transmit at full rate, repeatedly retransmits when collision happens.It doesn’t retransmit right away. Instead waiting a random delay. </p>
</blockquote>
<ul>
<li><p>ALOHA protocols: </p>
<ol>
<li>Slotted ALOHA</li>
<li>ALOHA</li>
</ol>
</li>
<li><p>carrier sense multiple access (CSMA) protocols:</p>
<p>Carrier Sense Multiple Access with Collision Dection (CSMA/CD)</p>
<blockquote>
<p>Ethernet is a popular and widely deployed CSMA protocol.</p>
</blockquote>
</li>
<li></li>
</ul>
</li>
<li><p>Taking-Turns Protocols</p>
<ul>
<li>polling protocol: <ul>
<li>round-robin</li>
<li>eliminates collisions and empty slots Random Access Protocols has while it has a polling delay—the amount of time required to notify a node that it can transmit.</li>
</ul>
</li>
<li>token-passing protocol: </li>
</ul>
</li>
</ul>
</li>
<li><p>Switched Local Area Networks</p>
</li>
</ul>
<h4 id="Chapter-7-Wireless-and-Mobile-Networks"><a href="#Chapter-7-Wireless-and-Mobile-Networks" class="headerlink" title="Chapter 7 Wireless and Mobile Networks"></a>Chapter 7 Wireless and Mobile Networks</h4><ul>
<li><p>WiFi:  IEEE 802.11 Wireless LANs</p>
<ul>
<li><p>architecture</p>
<blockquote>
<p>BSS: basic service set; </p>
<p>AP: access point,  central base station.</p>
</blockquote>
<img src="D:\blog\coriiiander\source\_posts\pictures\80211architecture.png" alt="80211architecture" style="zoom:50%;" />

<ul>
<li><p>ad hoc network: a network with no central control and with no connections to the “outside world.”</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\adhoc.png" alt="adhoc" style="zoom:50%;" /></li>
<li><p>Channels and Association</p>
<blockquote>
<p>APs are assigned  <strong>Service Set Identifier (SSID)</strong> and a channel number.</p>
</blockquote>
<blockquote>
<p>The set of channels 1, 6 and 11 is the only set of three non-overlapping channels. </p>
</blockquote>
<ul>
<li><p>Associating means the wireless device creates a virtual wire between itself and the AP.</p>
</li>
<li><p><strong>WiFi jungle</strong> is any physical location where a wireless station receives a sufficiently strong signal from two or more APs. </p>
</li>
<li><p>The device send a DHCP discovery message into the subnet via the AP in order to obtain an IP address on the subnet.</p>
<p>Once associated with an AP, the device will want to join the subnet to which the AP belongs.</p>
<img src="D:\blog\coriiiander\source\_posts\pictures\scanning.png" alt="scanning " style="zoom:67%;" /></li>
</ul>
</li>
</ul>
</li>
<li><p>The 802.11 MAC Protocol</p>
<ul>
<li><p>CSMA with collision avoidance (CSMA/CA)</p>
<blockquote>
<p>“Carrier sense multiple access” meaning that each station senses the channel before transmitting, and refrains from transmitting when the channel is sensed busy.</p>
<p>Because the reasons that adapter can’t transmit and listen at the same time and the hidden terminal problem and fading, the adapter would not be able to detect all collisions.</p>
<p>It transmits the frame in its entirety and there is no turning back, so several collision-avoidance techniques are employed.</p>
</blockquote>
<img src="D:\blog\coriiiander\source\_posts\pictures\80211.png" alt="80211" style="zoom:60%;" /></li>
<li><p>RTS &amp; CTS</p>
<blockquote>
<p>settle hidden terminals</p>
</blockquote>
<ul>
<li>RTS: Request to Send; CTS: Clear to Send.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
</search>
